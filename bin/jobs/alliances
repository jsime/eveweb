#!/usr/bin/env perl

use v5.10;
use strict;
use warnings FATAL => 'all';

use Config::Any;
use Data::Dumper;
use DBIx::DataStore ( config => 'yaml' );
use File::Basename;
use Games::EVE::APIv2;

my ($SCRIPT, $BASEDIR) = fileparse(__FILE__);
eval <<EOV;
    use lib '$BASEDIR/../../lib';

    use EVEWeb::Job;
EOV
die "Could not set up environment properly.\n" if $@;

my $cfg = Config::Any->load_files({
    files => ["$BASEDIR/../../eveweb.conf"],
    use_ext => 1,
    flatten_to_hash => 1,
});
$cfg = $cfg->{(keys %{$cfg})[0]};

my $db = DBIx::DataStore->new($cfg->{'Model::DB'}{'datastore'});

# Get a random admin user's key. Doesn't really matter whose, or what its access
# mask is. We just need something to pass in to the API lib.
my $res = $db->do(q{
    select k.key_id, k.v_code
    from eve.api_keys k
        join public.users u on (u.user_id = k.user_id)
        join public.user_roles ur on (ur.user_id = u.user_id)
        join public.roles r on (r.role_id = ur.role_id)
    where r.role_name in ('admin','superadmin')
        and k.active
        and coalesce(k.expires_at, 'infinity'::timestamptz) > now()
    order by random()
    limit 1
});

die $res->error unless $res;
die "Could not find a suitable API Key for retrieving alliance information.\n"
    unless $res->next;

my $api = Games::EVE::APIv2->new( key_id => $res->{'key_id'}, v_code => $res->{'v_code'} );
update_alliance($_) for Games::EVE::APIv2::Alliance->all($api->key);

sub update_alliance {
    my ($alliance) = @_;

    printf("Updating Alliance %s (%d)\n", $alliance->name, $alliance->alliance_id);

    $db->begin;

    my $res = $db->do(q{
        update eve.alliances
        set ???
        where alliance_id = ?
    }, {
        name        => $alliance->name,
        short_name  => $alliance->short_name,
        founded     => $alliance->founded . '+0000',
    }, $alliance->alliance_id);

    unless ($res) {
        warn $res->error;
        $db->rollback;
        return 0;
    }

    if ($res->count < 1) {
        $res = $db->do(q{
            insert into eve.alliances ???
        }, {
            alliance_id => $alliance->alliance_id,
            name        => $alliance->name,
            short_name  => $alliance->short_name,
            founded     => $alliance->founded . '+0000',
        });

        unless ($res) {
            warn $res->error;
            $db->rollback;
            return 0;
        }
    }

    $db->commit;

    update_alliance_corps($alliance);
}

sub update_alliance_corps {
    my ($alliance) = @_;

    CORP:
    foreach my $corp ($alliance->corporations) {
        printf("    Updating Corporation %s (%d)\n", $corp->name, $corp->corporation_id);

        $db->begin;

        my $cached_until = $corp->cached_until
            ? $corp->cached_until
            : DateTime->now->add( hours => 1 );

        my $res = $db->do(q{
            update eve.corporations
            set ???
            where corporation_id = ?
        }, {
            name         => $corp->name,
            ticker       => $corp->ticker,
            tax_rate     => $corp->tax_rate,
            members      => $corp->member_count,
            shares       => $corp->shares,
            cached_until => $cached_until,
        }, $corp->corporation_id);

        unless ($res) {
            warn $res->error;
            $db->rollback;
            return 0;
        }

        if ($res->count < 1) {
            $res = $db->do(q{
                insert into eve.corporations ???
            }, {
                corporation_id => $corp->corporation_id,
                name           => $corp->name,
                ticker         => $corp->ticker,
                tax_rate       => $corp->tax_rate,
                members        => $corp->member_count,
                shares         => $corp->shares,
                cached_until   => $cached_until,
            });

            unless ($res) {
                warn $res->error;
                $db->rollback;
                return 0;
            }
        }

        $db->commit;
    }
}
