#!/usr/bin/env perl

use v5.10;
use strict;
use warnings FATAL => 'all';

use Config::Any;
use Data::Dumper;
use DBIx::DataStore ( config => 'yaml' );
use File::Basename;
use Games::EVE::APIv2;

my ($SCRIPT, $BASEDIR) = fileparse(__FILE__);
eval <<EOV;
    use lib '$BASEDIR/../../lib';

    use EVEWeb::Job;
EOV
die "Could not set up environment properly.\n" if $@;

my $cfg = Config::Any->load_files({
    files => ["$BASEDIR/../../eveweb.conf"],
    use_ext => 1,
    flatten_to_hash => 1,
});
$cfg = $cfg->{(keys %{$cfg})[0]};

my $db = DBIx::DataStore->new($cfg->{'Model::DB'}{'datastore'});

JOB:
while (my $job = EVEWeb::Job->claim($db, 'pilot')) {
    $job->start;

    my @keys = get_pilot_keys($job->stash->{'pilot_id'});
    my $pilot;

    if (@keys > 0) {
        $pilot = Games::EVE::APIv2::Character->new(
            key          => $keys[0],
            character_id => $job->stash->{'pilot_id'}
        );
    } else {
        $pilot = Games::EVE::APIv2::Character->new(
            character_id => $job->stash->{'pilot_id'}
        );
    }

    update_pilot($pilot);

    $job->finish;

    EVEWeb::Job->new(
        db     => $db,
        type   => 'pilot',
        stash  => { pilot_id => $pilot->character_id },
        run_at => $pilot->cached_until || DateTime->now->add( hours => 1 ),
    )->save;
}

sub get_pilot_keys {
    my ($pilot_id) = @_;

    my $res = $db->do(q{
        select k.key_id, k.v_code, k.access_mask
        from eve.api_keys k
            join eve.pilot_api_keys pk on (pk.key_id = k.key_id)
        where pk.pilot_id = ?
            and k.active
            and k.expires_at > now()
    }, $pilot_id);

    return unless $res;

    my @keys;
    push(@keys, Games::EVE::APIv2::Key->new(
                    key_id => $res->{'key_id'},
                    v_code => $res->{'v_code'},
                    mask   => $res->{'access_mask'}
                )) while $res->next;

    return @keys;
}

sub update_pilot {
    my ($pilot) = @_;

    printf("Updating Pilot %s (%d)\n", $pilot->name, $pilot->character_id);

    my %updates;

    $updates{'balance'} =    $pilot->balance         if $pilot->has_balance;
    $updates{'sec_status'} = $pilot->security_status if $pilot->has_security_status;

    if (keys %updates > 0) {
        $updates{'cached_until'} = $pilot->cached_until . '+0000';

        my $res = $db->do(q{
            update eve.pilots set ??? where pilot_id = ?
        }, \%updates, $pilot->character_id);
    }

    foreach my $corp ($pilot->corporations) {
        if (update_corporation($corp)) {
            update_membership($pilot, $corp);
        }
    }

    update_attributes($pilot);
    update_skills($pilot);
    update_skill_queue($pilot);

    return 1;
}

sub update_corporation {
    my ($corp) = @_;

    my $res = $db->do(q{
        select c.*, case when c.cached_until <= now() then 0 else 1 end as cached
        from eve.corporations c
        where c.corporation_id = ?
    }, $corp->corporation_id);

    return 0 unless $res;

    if ($res->next) {
        return 1 if $res->{'cached'};

        $res = $db->do(q{
            update eve.corporations set ??? where corporation_id = ?
        }, {
            name         => $corp->name,
            ticker       => $corp->ticker,
            tax_rate     => $corp->tax_rate,
            members      => $corp->member_count,
            shares       => $corp->shares,
            cached_until => $corp->cached_until ? $corp->cached_until . '+0000' : DateTime->now->add( hours => 1 ),
        }, $corp->corporation_id);
    } else {
        $res = $db->do(q{
            insert into eve.corporations ???
        }, {
            corporation_id => $corp->corporation_id,
            name           => $corp->name,
            ticker         => $corp->ticker,
            tax_rate       => $corp->tax_rate,
            members        => $corp->member_count,
            shares         => $corp->shares,
            cached_until   => $corp->cached_until ? $corp->cached_until . '+0000' : DateTime->now->add( hours => 1 ),
        });
    }

    return 0 unless $res;
    return 1;
}

sub update_membership {
    my ($pilot, $corp) = @_;

    my $res = $db->do(q{
        select pc.*
        from eve.pilot_corporations pc
        where pc.pilot_id = ?
            and pc.corporation_id = ?
            and pc.from_datetime = ?
    }, $pilot->character_id, $corp->corporation_id, $corp->start_date . '+0000');

    return 0 unless $res;

    if ($res->next) {
        $res = $db->do(q{
            update eve.pilot_corporations
            set
                to_datetime = ?
            where pilot_id = ?
                and corporation_id = ?
                and from_datetime = ?
        }, ($corp->end_date ? $corp->end_date . '+0000' : undef),
            $pilot->character_id, $corp->corporation_id, $corp->start_date . '+0000'
        );
    } else {
        $res = $db->do(q{
            insert into eve.pilot_corporations ???
        }, {
            pilot_id       => $pilot->character_id,
            corporation_id => $corp->corporation_id,
            from_datetime  => $corp->start_date . '+0000',
            to_datetime    => ($corp->end_date ? $corp->end_date . '+0000' : undef),
        });
    }

    return 1;
}

sub update_attributes {
    my ($pilot) = @_;

    $db->begin;

    foreach my $attr (qw( intelligence memory charisma perception willpower )) {
        my $has_attr = 'has_' . $attr;

        next unless $pilot->$has_attr;

        my $res = $db->do(q{
            update eve.pilot_attributes
            set ???
            where pilot_id = ?
                and attribute_id = (select attribute_id
                                    from ccp.attributes
                                    where lower(name) = ?)
        }, {
            level => $pilot->$attr
        }, $pilot->character_id, $attr);

        unless ($res) {
            $db->rollback;
            warn $res->error;
            return;
        }

        if ($res->count < 1) {
            $res = $db->do(q{
                insert into eve.pilot_attributes
                    ( pilot_id, level, attribute_id )
                values
                    ( ?, ?, (select attribute_id
                             from ccp.attributes
                             where lower(name) = ?))
            }, $pilot->character_id, $pilot->$attr, $attr);

            unless ($res) {
                $db->rollback;
                warn $res->error;
                return;
            }
        }
    }

    $db->commit;
}

sub update_skills {
    my ($pilot) = @_;

    my @skills = $pilot->skills;

    return 0 unless @skills > 0;

    $db->begin;

    foreach my $skill (@skills) {
        my $res = $db->do(q{
            update eve.pilot_skills
            set ???
            where pilot_id = ?
                and skill_id = ?
        }, {
            level        => $skill->level,
            skill_points => $skill->skillpoints_trained,
        }, $pilot->character_id, $skill->skill_id);

        unless ($res) {
            $db->rollback;
            warn $res->error;
            return;
        }

        if ($res->count < 1) {
            $res = $db->do(q{
                insert into eve.pilot_skills ???
            }, {
                pilot_id     => $pilot->character_id,
                skill_id     => $skill->skill_id,
                level        => $skill->level,
                skill_points => $skill->skillpoints_trained,
            });

            unless ($res) {
                $db->rollback;
                warn $res->error;
                return;
            }
        }
    }

    $db->commit;
}

sub update_skill_queue {
    my ($pilot) = @_;

    $db->begin;

    my $res = $db->do(q{
        delete from plans.skill_queues where pilot_id = ?
    }, $pilot->character_id);

    unless ($res) {
        warn $res->error;
        $db->rollback;
        return 0;
    }

    foreach my $skill ($pilot->skill_queue) {
        next unless $skill->end_time; # skip if the queue is paused (no end time)

        $res = $db->do(q{
            insert into plans.skill_queues ???
        }, {
            pilot_id     => $pilot->character_id,
            position     => $skill->position,
            skill_id     => $skill->skill_id,
            level        => $skill->level,
            start_points => $skill->start_sp || 0,
            end_points   => $skill->end_sp,
            start_time   => $skill->start_time . '+0000',
            end_time     => $skill->end_time . '+0000',
        });

        unless ($res) {
            warn $res->error;
            $db->rollback;
            return 0;
        }
    }

    $db->commit;
    return 1;
}
