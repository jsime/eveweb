#!/usr/bin/env perl

use v5.10;
use strict;
use warnings FATAL => 'all';

use Config::Any;
use Data::Dumper;
use DBIx::DataStore ( config => 'yaml' );
use File::Basename;
use Games::EVE::APIv2;

my ($SCRIPT, $BASEDIR) = fileparse(__FILE__);
eval <<EOV;
    use lib '$BASEDIR/../../lib';

    use EVEWeb::Job;
EOV
die "Could not set up environment properly.\n" if $@;

my $cfg = Config::Any->load_files({
    files => ["$BASEDIR/../../eveweb.conf"],
    use_ext => 1,
    flatten_to_hash => 1,
});
$cfg = $cfg->{(keys %{$cfg})[0]};

my $db = DBIx::DataStore->new($cfg->{'Model::DB'}{'datastore'});

JOB:
while (my $job = EVEWeb::Job->claim($db, 'key')) {
    $job->start;

    my $res = $db->do(q{
        select k.*
        from eve.api_keys k
        where k.key_id = ?
    }, $job->stash->{'key_id'});

    unless ($res && $res->next) {
        $job->finish;

        next JOB;
    }

    my $api = Games::EVE::APIv2->new(
        key_id => $res->{'key_id'},
        v_code => $res->{'v_code'},
    );

    if (!$api || $api->key->expired) {
        $job->finish;

        next JOB;
    }

    if (lc($api->key->type) eq 'corporation') {
        check_corporations($api);
    } else {
        check_characters($api);
    }

    $job->finish;

    EVEWeb::Job->new(
        db     => $db,
        type   => 'key',
        stash  => { key_id => $api->key->key_id },
        run_at => DateTime->now->add( minutes => 30 ),
    )->save;
}

sub check_characters {
    my ($api) = @_;

    CHARACTER:
    foreach my $char ($api->characters) {
        my $res = $db->do(q{
            select p.pilot_id, pk.key_id
            from eve.pilots p
                left join eve.pilot_api_keys pk on (pk.pilot_id = p.pilot_id)
            where p.pilot_id = ?
                and pk.key_id = ?
        }, $char->character_id, $api->key->key_id);

        next CHARACTER if !$res;
        $char->name; # Force an API call

        if ($res->next) {
            unless ($res->{'key_id'}) {
                $res = $db->do(q{
                    insert into eve.pilot_api_keys ???
                }, { pilot_id => $char->character_id, key_id => $api->key->key_id });
            }

            update_character($char);
        } else {
            add_character($char);
        }

        EVEWeb::Job->new(
            db     => $db,
            type   => 'pilot',
            stash  => { pilot_id => $char->character_id },
            run_at => $char->cached_until || DateTime->now->add( hours => 1),
        )->save;
    }
}

sub add_character {
    my ($char) = @_;

    my %pilot = (
        pilot_id     => $char->character_id,
        name         => $char->name,
        race         => $char->race,
        sec_status   => $char->security_status,
        cached_until => $char->cached_until,
    );

    $pilot{'bloodline'} = $char->bloodline     if $char->has_bloodline;
    $pilot{'ancestry'}  = $char->ancestry      if $char->has_ancestry;
    $pilot{'gender'}    = $char->gender        if $char->has_gender;
    $pilot{'birthdate'} = $char->dob . '+0000' if $char->has_dob;
    $pilot{'balance'}   = $char->balance       if $char->has_balance;

    my $res = $db->do(q{
        insert into eve.pilots ??? returning pilot_id
    }, \%pilot);

    return 0 unless $res && $res->next;

    $res = $db->do(q{
        insert into eve.pilot_api_keys ???
    }, { pilot_id => $char->character_id, key_id => $char->key->key_id });
}

sub add_corporation {
    my ($corp) = @_;
}

sub check_corporations {
    my ($api) = @_;
}

sub update_character {
    my ($char) = @_;

    my %updates;

    $updates{'balance'} = $char->balance            if $char->has_balance;
    $updates{'sec_status'} = $char->security_status if $char->has_security_status;

    return 0 unless keys %updates > 0;

    $updates{'cached_until'} = $char->cached_until . '+0000';

    my $res = $db->do(q{
        update eve.pilots set ??? where pilot_id = ?
    }, \%updates, $char->character_id);

    return 1;
}

sub update_corporation {
    my ($corp) = @_;
}

