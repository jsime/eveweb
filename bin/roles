#!/usr/bin/env perl

use v5.10;
use strict;
use warnings FATAL => 'all';

use Config::Any;
use Data::Dumper;
use DBIx::DataStore ( config => 'yaml' );
use File::Basename;
use Text::Wrap;

my ($SCRIPT, $BASEDIR) = fileparse(__FILE__);
eval <<EOV;
    use lib '$BASEDIR/../lib';
EOV
die "Could not set up environment properly.\n" if $@;

my $cfg = Config::Any->load_files({
    files => ["$BASEDIR/../eveweb.conf"],
    use_ext => 1,
    flatten_to_hash => 1,
});
$cfg = $cfg->{(keys %{$cfg})[0]};

exit usage() if @ARGV < 1 || $ARGV[0] =~ m|^-{0,2}h(elp)?$|o;

my $command = lc(shift @ARGV);
exit usage() unless $command =~ m{^(list|status|member|grant|revoke)$}o;

my $db = DBIx::DataStore->new($cfg->{'Model::DB'}{'datastore'});

exit list_roles()               if $command eq 'list';
exit list_members(shift @ARGV)  if $command eq 'status';
exit member_roles(users(@ARGV)) if $command eq 'member';

exit grant_roles(shift @ARGV, users(@ARGV))  if $command eq 'grant';
exit revoke_roles(shift @ARGV, users(@ARGV)) if $command eq 'revoke';

sub list_roles {
    my $res = $db->do(q{
        select r.role_id, r.role_name, r.description,
            count(ur.user_id) as num_users
        from public.roles r
            left join public.user_roles ur on (ur.role_id = r.role_id)
        group by r.role_id, r.role_name, r.description
        order by r.role_name asc
    });

    return 1 unless $res;

    printf("%-16s  %6s  %s\n", 'Role', 'Users', 'Description');
    print '-' x 76 . "\n";
    while ($res->next) {
        print wrap(sprintf('%-16s  %6d  ', $res->{'role_name'}, $res->{'num_users'}),
            ' ' x 26, $res->{'description'});
        print "\n" . '-' x 76 . "\n";
    }

    return 0;
}

sub list_members {
    return 0;
}

sub member_roles {
    return 0;
}

sub grant_roles {
    my ($role, @userids) = @_;

    die "No valid users provided.\n" unless @userids > 0;

    my $res = $db->do(q{
        select r.role_id
        from public.roles r
        where lower(r.role_name) = ?
    }, lc($role));

    die "Invalid role name: $role\n" unless $res && $res->next;

    my $role_id = $res->{'role_id'};

    $res = $db->do(q{
        insert into public.user_roles
            ( role_id, user_id )
        select cast(? as integer), u.user_id
        from public.users u
        where u.user_id in ???
      except
        select ?, u.user_id
        from public.users u
            join public.user_roles ur on (ur.user_id = u.user_id)
        where u.user_id in ???
            and ur.role_id = ?
    }, $role_id, \@userids, $role_id, \@userids, $role_id);

    die $res->error unless $res;

    print "Roles granted.\n";

    return 0;
}

sub revoke_roles {
    my ($role, @userids) = @_;

    die "No valid users provided.\n" unless @userids > 0;

    my $res = $db->do(q{
        select r.role_id
        from public.roles r
        where lower(r.role_name) = ?
    }, lc($role));

    die "Invalid role name: $role\n" unless $res && $res->next;

    my $role_id = $res->{'role_id'};

    $res = $db->do(q{
        delete from public.user_roles
        where role_id = ? and user_id in ???
    }, $role_id, \@userids);

    die $res->error unless $res;

    print "Roles revoked.\n";

    return 0;
}

sub users {
    my @keys = map { lc($_) } @_;

    my $res = $db->do(q{
        select u.user_id
        from public.users u
        where u.user_id in ???
      union
        select u.user_id
        from public.users u
        where lower(u.username) in ??? or lower(u.email) in ???
    }, [-1, grep { $_ =~ m{^\d+$}o } @keys], ['',@keys], ['',@keys]);

    die $res->error unless $res;

    my @users;
    push(@users, $res->{'user_id'}) while $res->next;
    return @users;
}

sub usage {
    print <<EOU;
$SCRIPT - Manage System Roles for EVEWeb

LIST ROLES

    $SCRIPT list

LIST ROLE MEMBERS

    $SCRIPT status [<role>]

SHOW MEMBER ROLES

    $SCRIPT member <userid|username|email>

GRANT ROLE

    $SCRIPT grant <role> <userid|username|email>

Take note that granting superadmin implicitly grants admin as well.
You may grant to more than one member in a single run by separating
their ID/name/email with spaces.

REVOKE ROLE

    $SCRIPT revoke <role> <userid|username|email>

Take note that revoking admin implicitly revokes superadmin as well.
You may revoke from more than one member in a single run by separating
their ID/name/email with spaces.

EOU
}
